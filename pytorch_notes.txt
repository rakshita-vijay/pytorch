torch.tensor: multi-dimensional matrix containing elements of the same data type

torch.nn module: contains tools for building neural networks

torch.nn.functional: has functions like activation functions and loss functions

class Model(nn.Module) 
    nn.Module is the base class for all neural network models in PyTorch. 
    By inheriting from it, your class gets all the features needed for a neural network.  

self.fc1 = nn.Linear(in_features, h1):
    Creates the first fully connected (linear) layer. 
    Takes in_features inputs and outputs h1 values (neurons).

relu: rectified linear unit
      common activation f() used in nn, especially deep learning models
      helps the network learn complex patterns by introducing non-linearity (model can learn more than just straight lines or simple relationships)
 
f(x) = max(0, x) 
- If x > 0, output x
- If x <= 0, output 0

import matplotlib.pyplot as plt: to plot the graph of loss vs. epochs/batches

// ~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*

convolutional nn: class of deep learning algos, particularly suited for image analysis 

featured maps in cnns: output of a convolutional layer, representing the activation of filters (also called kernels) across the input image or another feature map
                       matrix of activation numbers from 0-1

what is convolution: 
you have an image - which translates to a 6x6 grid of numbers from 0 to 1
an image patch (local receptive field) is a 3x3 section of it

this patch is multiplied with a kernel/filter (2D array - [[1,2,3],
                                                           [4,5,6],
                                                           [7,8,9]] )
not matrix multiplication - just patch_box_value * kernel_box_value - call it 'patch_matrix'

add up all the numbers in this patch_matrix
this give you an output
then you shift the img patch to the right (column++), repeat until you hit the end
then row++, column reset to 0
this "blurs" the images pixel-by-pixel, block-by-block 
